$schema: "http://json-schema.org/draft-07/schema#"
description: an entry in the sample sheet
properties:
  sample:
    type: string
    pattern: ^[^\s]*$
    description: A unique identifier for a sample; this will be used to name all output files for this sample
  rglb:
    type: string
    pattern: ^[^\s]*$
    description: Library Identifier
  rgpl:
    type: string
    pattern: ^[^\s]*$
    description: Read Group Platform; usually Illumina
  rgpu:
    type: string
    pattern: ^[^\s]*$
    description: Read Group Platform Unit
  rgsm:
    type: string
    pattern: ^[^\s]*$
    description: Read Group Sample
  reference:
    type: string
    pattern: ^[^\s]*\.fa(sta)?$
    description: The path to the prepared reference genome to use with this sample.
  target_bed:
    type: string
    pattern: ^[^\s]*\.bed$
    description: A bed file showing where the targets are for this particular sample
  maskBed:
    type: string
    pattern: NONE|^[^\s]*\.bed$
    default: NONE
    description: A bed file to use for masking variants.  
  blast_db:
    type: string
    default: NONE
    pattern: ^[^\s]*$
    description: The blast database to use for contaminant filtering; must include your target genome, if used.
  targetTaxonId: 
    type: integer
    default: 9606
    description: The taxon ID of the species you are expecting to be present in the sample.
  baseDir:
    type: string
    pattern: ^[^\s]*$
    description: The directory the input files are in, and where the output files will be created.
  in1:
    type: string
    default: "seq1.fq"
    pattern: ^[^\s]*\.((fq)|(fastq))(\.gz)?$
    description: The read1 fastq (or fastq.gz, or fq.gz, or fq) file for this sample. Note that this is just the name of the file, and not the full path.
  in2:
    type: string
    default: "seq2.fq"
    pattern: ^[^\s]*\.((fq)|(fastq))(\.gz)?$
    description: The read2 fastq (or fastq.gz, or fq.gz, or fq) file for this sample. Note that this is just the name of the file, and not the full path.
  mqFilt:
    type: integer
    default: 0
    minimum: 0
    description: A threshold for mapping quality filtering, if desired.
  minMem:
    type: integer
    default: 0
    minimum: 0
    description: The minimum number of reads that must be in a family for consensus making
  maxMem:
    type: integer
    default: 200
    minimum: 0
    description: The maximum number of reads in a family the consensus maker should consider.
  cutOff:
    type: number
    default: 0.9
    minimum: 0.5
    maximum: 1
    description: The threshold for consensus making; the consensus maker will require at least this much agreement on a per base pair level.
  nCutOff:
    type: number
    default: 1
    minimum: 0
    maximum: 1
    description: The maximum proportion of N bases in an output consensus sequence.
  umiLen:
    type: integer
    default: 8
    minimum: 0
    description: The length of the UMI in this sample
  spacerLen:
    type: integer
    default: 1
    minimum: 0
    description: The length of the spacer sequence in this sample
  locLen:
    type: integer
    default: 10
    minimum: 0
    description: The localization length to use for this sample
  readLen:
    type: integer
    default: 101
    minimum: 1
    description: The length of a read for this sample 
  adapterSeq:
    type: string
    default: "ANNNNNNNNAGATCGGAAGAG"
    pattern: (^[^\s]*\.fasta$)|(^[ACTGRYSWKMBDHVN]*$)
    description: The adapter sequence used in library preperation, with UMI bases as Ns, and spacer sequence included.  Alternatively, a fasta file with all possible UMI-adapter conbinations.  
  clipBegin:
    type: integer
    default: 7
    minimum: 0
    description: How many bases to clip off the 5' end of the read
  clipEnd:
    type: integer
    default: 0
    minimum: 0
    description: How many bases to clip off the 3' end of the read
  minClonal:
    type: number
    default: 0
    minimum: 0
    maximum: 1
    description: The minimum clonality to use for count_muts generation
  maxClonal:
    type: number
    default: 0.1
    minimum: 0
    maximum: 1
    description: The maximum clonality to use for count_muts generation
  minDepth:
    type: integer
    default: 100
    minimum: 1
    description: The minimum depth to use for count_muts generation 
  maxNs:
    type: number
    default: 1
    minimum: 0
    maximum: 1
    description: The maximum proportion of N bases to use for count_muts generation
  recovery:
    type: string
    pattern: ^[^\s]*\.sh$
    default: "noRecovery.sh"
    description: The recovery script to use in attempting to recover ambiguously mapped reads (as determine by blast alignment vs bwa alignment).
  cluster_dist:
    type: integer
    default: 10
    minimum: 0
    description: How close together variants have to be to be considered 'clustered'
  cm_outputs:
    type: string
    pattern: ^[GBN]*$
    default: "GB"
    description: Select which sections to output, in addition to 'OVERALL'.  String of one or more of 'G', 'B', and 'N'.  G -> output GENE sections for each bed line; B -> output 'BLOCK' sections for each block in the bed line (if present); 'N' -> Only output overall frequencies.  Overrides all other options.  
  cm_sumTypes:
    type: string
    pattern: ^[GB][TB]$
    default: "GT"
    description: "How to calculate OVERALL and GENE blocks for countmuts output. The first character controls summing for overall: G -> OVERALL = sum(GENEs); B -> OVERALL = sum(BLOCKs).  In sum(GENEs) mode, this will ignore BLOCKs for the purposes of calculating OVERALL.  The second character controls summing for each GENE: T -> GENE = Whole gene, ignoring BLOCKs; B -> GENE = sum(BLOCKs)."
  cm_filters:
    type: string
    pattern: ^[a-zA-Z_]+((:[a-zA-Z_]+){0,})$
    default: "none"
    description: Select which filters to apply durring frequency calculation.  
  runSSCS:
    type: boolean
    default: false
    description: whether to run full processing for SSCS data.
  rerun_type:
    type: number
    default: 0
    minimum: 0
    maximum: 4
    description: What type of rerun you want to do.  0 -> no rerun;  1 -> rerun variant caller;  2 -> rerun postBlastRecovery; 3 -> rerun BLAST and alignment;  4 -> rerun consensus maker.  

required:
  - sample
  - rglb
  - rgpl
  - rgpu
  - rgsm
  - reference
  - target_bed
